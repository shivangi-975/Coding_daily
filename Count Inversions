// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long count=0;
    void Merge(long long arr[],long long l,long long mid,long long r)
    {
        long long B[r+1];
        int i=l;
        int j=mid+1;
        int k=l;
        while(i<=mid &&j<=r)
        {
            if(arr[i]<=arr[j])
            {
                B[k++]=arr[i++];
            }
            else
            {
            B[k++]=arr[j++];
            count+=mid-i+1;
        }
        }
        while(i<=mid)
        B[k++]=arr[i++];
        while(j<=r)
        B[k++]=arr[j++];
        for(long long i=l;i<=r;i++)
        {
            arr[i]=B[i];
        }
        
    }
    void MergeSort(long long arr[],long long l,long long r)
    {
        if(l<r)
        {
            long long mid=(l+r)/2;
             MergeSort(arr,l,mid);
             MergeSort(arr,mid+1,r);
             Merge(arr,l,mid,r);
        }
        
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        count=0;
        MergeSort(arr,0,N-1);
        return count;
    }

};

